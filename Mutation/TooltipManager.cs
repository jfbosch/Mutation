using CognitiveSupport;

namespace Mutation;

public class TooltipManager
{
	private readonly ToolTip _toolTip;
	private readonly Settings _settings;

	public TooltipManager(ToolTip toolTip, Settings settings)
	{
		_toolTip = toolTip ?? throw new ArgumentNullException(nameof(toolTip));
		_settings = settings ?? throw new ArgumentNullException(nameof(settings));
	}

	public void SetupTooltips(TextBox txtSpeechToTextPrompt,
		 Label lblSpeechToTextPrompt,
		 Label lblSpeechToText,
		 Label lblFormatTranscriptResponse)
	{
		string speechToTextPromptToolTipMsg =
			 "You can use a prompt to improve the quality of the transcripts generated by the Whisper API. The model will try to match the style of the prompt, so it will be more likely to use capitalization and punctuation if the prompt does too. This only provides limited control over the generated audio. Here are some examples of how prompting can help in different scenarios:\n\n" +
			 "Prompts can be very helpful for correcting specific words or acronyms that the model often misrecognizes in the audio. For example, the following prompt improves the transcription of the words DALL·E and GPT-3, which were previously written as 'DALI' and 'GDP 3': The prompt is:\n" +
			 "'OpenAI makes technology like DALL·E, GPT-3, and ChatGPT with the hope of one day building an AGI system that benefits all of humanity.'\n\n" +
			 "Sometimes the model might skip punctuation in the transcript. You can avoid this by using a simple prompt that includes punctuation, such as: 'Hello, welcome to my lecture.'\n\n" +
			 "The model may also leave out common filler words in the audio. If you want to keep the filler words in your transcript, you can use a prompt that contains them: 'Umm, let me think like, hmm... Okay, here's what I was thinking.'";

		_toolTip.SetToolTip(txtSpeechToTextPrompt, speechToTextPromptToolTipMsg);
		_toolTip.SetToolTip(lblSpeechToTextPrompt, speechToTextPromptToolTipMsg);

		var voiceCommands = _settings.LlmSettings?.TranscriptFormatRules?.Select(x => new
		{
			x.Find,
			ReplaceWith = x.ReplaceWith?.Replace(Environment.NewLine, "<new line>").Replace("\t", "<tab>"),
			x.MatchType,
			x.CaseSensitive
		})
		.Select(x => new
		{
			Rule = x,
			Spacing = new string(' ', Math.Max(0, 75 - $"{x.Find} = {x.ReplaceWith}".Length))
		})
		.Select(x => $"{x.Rule.Find} = {x.Rule.ReplaceWith}{x.Spacing}(Match: {x.Rule.MatchType}, Case Sensitive: {x.Rule.CaseSensitive})")
		.ToArray();

		string formattingCommandsPromptToolTipMsg = $"You can use the following voice commands while dictating: {Environment.NewLine}{Environment.NewLine}{string.Join(Environment.NewLine, voiceCommands ?? Array.Empty<string>())}";

		_toolTip.SetToolTip(lblSpeechToText, formattingCommandsPromptToolTipMsg);
		_toolTip.SetToolTip(lblFormatTranscriptResponse, formattingCommandsPromptToolTipMsg);
	}
}
